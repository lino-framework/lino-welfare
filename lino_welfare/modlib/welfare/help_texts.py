# -*- coding: UTF-8 -*-
# generated by lino.sphinxcontrib.help_text_builder
from __future__ import unicode_literals
from django.utils.translation import ugettext_lazy as _

help_texts = {
    'lino_welfare.chatelet.lib.cv.ClientIsLearning' : _("""Select only clients who are "learning" during the given date.
That is, who have an active Study, Training or
Experience.
Only the start_date is used, end_date has no effect when
this criteria."""),
    'lino_welfare.chatelet.lib.cv.Proof' : _("""A proof is some document which certifies that a given person
has a given skill."""),
    'lino_welfare.chatelet.lib.cv.PersonProperty' : _("""Abstract base for Skill, SoftSkill and
Obstacle."""),
    'lino_welfare.chatelet.lib.cv.Obstacle' : _("""An obstacle is an observed fact or characteristic of a client
which might be reason to not get a given job."""),
    'lino_welfare.chatelet.lib.cv.Obstacle.type' : _("""A pointer to ObstacleType."""),
    'lino_welfare.chatelet.lib.cv.Obstacle.user' : _("""The agent who observed this obstacle."""),
    'lino_welfare.chatelet.lib.cv.Obstacle.detected_date' : _("""The date when the agent observed this obstacle."""),
    'lino_welfare.migrate.Migrator' : _("""The standard migrator for welfare."""),
    'lino_welfare.modlib.aids.AidType' : _("""The Django model representing an aid type."""),
    'lino_welfare.modlib.aids.AidType.short_name' : _("""The short name for internal use, e.g. when a user must select
an aid type from a combobox."""),
    'lino_welfare.modlib.aids.AidType.confirmation_type' : _("""The database model to use for issuing an aid confirmation of
this type. This is a mandatory pointer to
ConfirmationTypes."""),
    'lino_welfare.modlib.aids.AidType.name' : _("""The designation of this aid type as seen by the user e.g. when
selecting an aid type."""),
    'lino_welfare.modlib.aids.AidType.excerpt_title' : _("""The text to print as title in confirmations.
See also
lino_xl.lib.excerpts.mixins.ExcerptTitle.excerpt_title."""),
    'lino_welfare.modlib.aids.AidType.body_template' : _("""The body template to use when printing a confirmation of this type.
If this field is empty, Lino uses the excerpt type's
body_template.
See also /admin/printing."""),
    'lino_welfare.modlib.aids.AidType.is_urgent' : _("""Whether aid grantings of this type are considered as urgent.
This is used by Confirmation.get_urgent_granting()"""),
    'lino_welfare.modlib.aids.AidType.board' : _("""Pointer to the default lino_xl.lib.boards.models.Board
for aid projects of this type."""),
    'lino_welfare.modlib.aids.AidType.confirmed_by_primary_coach' : _("""Whether grantings for this aid type are to be signed by the
client's primary coach (see Client.get_primary_coach)."""),
    'lino_welfare.modlib.aids.AidType.pharmacy_type' : _("""A pointer to the ClientContactType to be used when
selecting the pharmacy of a refund confirmation
(RefundConfirmation.pharmacy)."""),
    'lino_welfare.modlib.aids.Granting' : _("""The Django model representing an aid granting."""),
    'lino_welfare.modlib.aids.Granting.client' : _("""Pointer to the lino_welfare.modlib.pcsw.models.Client."""),
    'lino_welfare.modlib.aids.Granting.aid_type' : _("""The type of aid being granted. Mandatory.
Pointer to the AidType."""),
    'lino_welfare.modlib.aids.Granting.signer' : _("""Pointer to the user who is expected to "sign" this granting
(i.e. to confirm that it is real)."""),
    'lino_welfare.modlib.aids.Granting.board' : _("""Pointer to the Board
which decided to allocate this aid project."""),
    'lino_welfare.modlib.aids.Granting.category' : _("""Currently only used for printing an isip.Contract."""),
    'lino_welfare.modlib.aids.Confirmation' : _("""Base class for all aid confirmations."""),
    'lino_welfare.modlib.aids.Confirmation.get_date_range_veto' : _("""Return an error message if this confirmation lies outside of
granted period."""),
    'lino_welfare.modlib.aids.Confirmable' : _("""Base class for both Granting and Confirmation."""),
    'lino_welfare.modlib.aids.Confirmable.state' : _("""The confirmation state of this object. Pointer to
ConfirmationStates."""),
    'lino_welfare.modlib.aids.Confirmable.sign' : _("""Sign this granting or confirmation, making most fields read-only."""),
    'lino_welfare.modlib.aids.Confirmable.revoke' : _("""Revoke your signature of this granting or confirmation."""),
    'lino_welfare.modlib.art61.Contract' : _("""The Django database model."""),
    'lino_welfare.modlib.art61.Contract.get_subsidizations' : _("""Yield a list of all subsidizations activated for this
contract."""),
    'lino_welfare.modlib.art61.ContractsByClient' : _("""Shows the Art61 job supplyments for this client."""),
    'lino_welfare.modlib.cal.EventType' : _("""Adds two fields."""),
    'lino_welfare.modlib.cal.Guest' : _("""Adds a virtual field client."""),
    'lino_welfare.modlib.cal.Guest.client' : _("""Virtual field which returns the partner if it is a client."""),
    'lino_welfare.modlib.cbss.Sector' : _("""Default values filled from
lino_welfare.modlib.cbss.fixtures.sectors."""),
    'lino_welfare.modlib.cbss.Purpose' : _("""Codes qualité (Hoedanigheidscodes).
This table is usually filled with the official codes
by lino_welfare.modlib.cbss.fixtures.purposes."""),
    'lino_welfare.modlib.cbss.IdentifyPersonRequest' : _("""A request to the IdentifyPerson service."""),
    'lino_welfare.modlib.cbss.ManageAccessRequest' : _("""A request to the ManageAccess service."""),
    'lino_welfare.modlib.cbss.ManageAccessRequest.sector' : _("""Pointer to Sector."""),
    'lino_welfare.modlib.cbss.ManageAccessRequest.purpose' : _("""Pointer to Purpose."""),
    'lino_welfare.modlib.cbss.ManageAccessRequest.action' : _("""The action to perform.  This must be one of the values in
lino_welfare.modlib.cbss.choicelists.ManageActions"""),
    'lino_welfare.modlib.cbss.ManageAccessRequest.query_register' : _("""The register to be query.
This must be one of the values in
lino_welfare.modlib.cbss.choicelists.QueryRegisters"""),
    'lino_welfare.modlib.cbss.RetrieveTIGroupsRequest' : _("""A request to the RetrieveTIGroups service (aka Tx25)"""),
    'lino_welfare.modlib.debts.Account' : _("""An account is an item of an account chart used to collect
ledger transactions or other accountable items."""),
    'lino_welfare.modlib.debts.Account.name' : _("""The multilingual designation of this account, as the users see
it."""),
    'lino_welfare.modlib.debts.Account.group' : _("""The account group to which this account belongs.  This must
point to an instance of Group."""),
    'lino_welfare.modlib.debts.Account.seqno' : _("""The sequence number of this account within its group."""),
    'lino_welfare.modlib.debts.Account.ref' : _("""An optional unique name which can be used to reference a given
account."""),
    'lino_welfare.modlib.debts.Account.type' : _("""The account type of this account.  This must
point to an item of
lino_welfare.modlib.debts.AccountTypes."""),
    'lino_welfare.modlib.debts.Budget' : _("""A document which expresses the financial situation of a partner at
a given date."""),
    'lino_welfare.modlib.debts.Actor' : _("""An actor of a budget is a partner who is part of the household
for which the budget has been established."""),
    'lino_welfare.modlib.debts.Entry' : _("""A detail row of a Budget."""),
    'lino_welfare.modlib.debts.Entry.amount' : _("""The amount of money. An empty amount is different from a zero
amount in that the latter will be printed while the former
not."""),
    'lino_welfare.modlib.debts.Entry.account' : _("""The related Account."""),
    'lino_welfare.modlib.pcsw.Client' : _("""Inherits from lino_welfare.modlib.contacts.Person and
lino_xl.lib.beid.BeIdCardHolder."""),
    'lino_welfare.modlib.pcsw.Client.has_esf' : _("""Whether Lino should make ESF summaries for this client."""),
    'lino_welfare.modlib.pcsw.Client.overview' : _("""A panel with general information about this client."""),
    'lino_welfare.modlib.pcsw.Client.cvs_emitted' : _("""A virtual field displaying a group of shortcut links for managing CVs
(Curriculum Vitaes)."""),
    'lino_welfare.modlib.pcsw.Client.id_document' : _("""A virtual field displaying a group of buttons for managing the
"identifying document", i.e. an uploaded document which has been
used as alternative to the eID card."""),
    'lino_welfare.modlib.pcsw.Client.group' : _("""Pointer to PersonGroup.
The intergration phase of this client."""),
    'lino_welfare.modlib.pcsw.Client.civil_state' : _("""The civil state of this client. Allowed choices are defined in
CivilState."""),
    'lino_welfare.modlib.pcsw.Client.client_state' : _("""Pointer to ClientStates."""),
    'lino_welfare.modlib.pcsw.Client.unemployed_since' : _("""The date when this client got unemployed and stopped to have a
regular work."""),
    'lino_welfare.modlib.pcsw.Client.seeking_since' : _("""The date when this client registered as unemployed and started
to look for a new job."""),
    'lino_welfare.modlib.pcsw.Client.get_first_meeting' : _("""Return the last note of type "First meeting" for this client.
Usage example see debts and
notes."""),
    'lino_welfare.modlib.pcsw.Clients' : _("""The list that opens by Contacts ‣ Clients."""),
    'lino_welfare.modlib.pcsw.Clients.client_state' : _("""If not empty, show only Clients whose client_state equals
the specified value."""),
    'lino_welfare.modlib.cbss.tx25.RetrieveTIGroupsResult' : _("""Displays the response of an RetrieveTIGroupsRequest
as a table."""),
}
